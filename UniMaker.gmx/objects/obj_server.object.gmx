<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_speedmarker</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>

server_port = 1234      //Porta do servidor.
server_maxclients = 32  //Numero maximo de conexões. (NÃO É O NUMERO MAXIMO DE JOGADORES!)

//Cria o servidor com os valores das variaveis acima.
server_socket = network_create_server(network_socket_tcp, server_port, server_maxclients)
//Cria um buffer para enviar pacote aos clientes.
server_buffer = buffer_create(256, buffer_grow, 1)

//Lista que irão guardar as informações de cada cliente.
server_playerlist_id = ds_list_create()
server_playerlist_name = ds_list_create()
server_playerlist_x = ds_list_create()
server_playerlist_y = ds_list_create()



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Cria um Map temporario para criar um JSON e enviar para todos os clientes.
var players_map = ds_map_create();

//Adiciona todas as informações de todos os clientes no Map.
var player_count = ds_list_size(server_playerlist_id)
for (var i=0; i&lt;player_count; i+=1)
{
    var l = ds_list_create()
    ds_list_add(l, server_playerlist_name[| i])
    ds_list_add(l, server_playerlist_x[| i])
    ds_list_add(l, server_playerlist_y[| i])    
    ds_map_add_list(players_map, server_playerlist_id[| i], l)
};

//Transforma o Map em um JSON e adiciona ao buffer...
buffer_seek(server_buffer, buffer_seek_start, 0)
buffer_write(server_buffer, buffer_u8, 64)
buffer_write(server_buffer, buffer_string, json_encode(players_map)) 

//...que por final é enviado para todos os clientes conectados.    
for (var i=0; i&lt;player_count; i+=1)
{          
    network_send_packet(server_playerlist_id[| i], server_buffer, buffer_tell(server_buffer))
};

//Destroi o Map para liberar memória (evitar memory leak).
ds_map_destroy(players_map)

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var as_type, as_id, as_ip, as_port;
as_type = async_load[? 'type']  //Tipo de evento, pode ser (conexão, desconexão e dados).
as_id = async_load[? 'id']      //ID de quem enviou esse pacote. 
as_ip = async_load[? 'ip']      //IP do mesmo caso seja necessário posteriormente. 

switch (as_type)
{
    //Caso um cliente tenha conectado.
    case network_type_connect: 
    {
        //Armazena o ID dele e adiciona dados iniciais nas listas.
        var socket = async_load[? 'socket'];
        ds_list_add(server_playerlist_id, socket)
        ds_list_add(server_playerlist_name, 'noname' + string(socket))
        ds_list_add(server_playerlist_x, 32)
        ds_list_add(server_playerlist_y, 32)
        
        //Envia ao cliente recém conectado um pedido para saber qual seu nome.
        //Também envia junto o ID dele.                
        buffer_seek(server_buffer, buffer_seek_start, 0)
        buffer_write(server_buffer, buffer_u8, 100)
        buffer_write(server_buffer, buffer_u8, socket)         
        network_send_packet(socket, server_buffer, buffer_tell(server_buffer))
        
    }; break;
    
    //Quando um cliente se desconecta.
    case network_type_disconnect: 
    {
        var socket = async_load[? 'socket'];
        //Procura a posição dele nas listas e deleta.
        var index = ds_list_find_index(server_playerlist_id, socket)
        if index &gt; -1
        {
            ds_list_delete(server_playerlist_id, index)
            ds_list_delete(server_playerlist_name, index)
            ds_list_delete(server_playerlist_x, index)
            ds_list_delete(server_playerlist_y, index) 
                                  
            //Escreve no buffer o ID do cliente...
            buffer_seek(server_buffer, buffer_seek_start, 0)
            buffer_write(server_buffer, buffer_u8, 65)
            buffer_write(server_buffer, buffer_u8, async_load[? 'socket']) 
        
            ////...e manda para todos os outros clientes.
            var player_count = ds_list_size(server_playerlist_name)
            for (var i=0; i&lt;player_count; i+=1)
            {
                if server_playerlist_id[| i] != socket
                {network_send_packet(server_playerlist_id[| i], server_buffer, buffer_tell(server_buffer))}
            }; 
                                        
        }


    }; break;
    
    //Quando dados chegam.
    case network_type_data: 
    {
        
        var buffer = async_load[? 'buffer']; //Armazena o ID do buffer que contem todos os dados.
        var index = ds_list_find_index(server_playerlist_id, as_id); //Procura o "index" do cliente nas lista de antemão.
        var channel = buffer_read(buffer, buffer_u8); //Lê o primeiro dado do buffer que deve ser o canal.
        switch (channel)
        {
            //Recebe "ping" e responde "pong".
            case 16: 
            {
                //Envia de volta para o cliente os mesmos dados recebidos
                //como se fosse um espelho, o calculo do ping será feito
                //pelo próprio cliente quando esse pacote chegar.
                buffer_seek(server_buffer, buffer_seek_start, 0)
                buffer_write(server_buffer, buffer_u8, 16)
                buffer_write(server_buffer, buffer_u32, buffer_read(buffer, buffer_u32)) 
                network_send_packet(as_id, server_buffer, buffer_tell(server_buffer)) 
            }; break;

            //Atualiza as coordenadas do jogador.
            case 32: 
            {
                ds_list_replace(server_playerlist_x, index, buffer_read(buffer, buffer_u16))
                ds_list_replace(server_playerlist_y, index, buffer_read(buffer, buffer_u16))  
            }; break;
            
            //Recebe uma resposta do cliente com o nome/nickname/apelido dele
            //e altera o nome padrão (nonamexxx) para o nome recebido.
            case 101: 
            {
                ds_list_replace(server_playerlist_name, index, buffer_read(buffer, buffer_string))    
            }; break;
        }
         
    }; break;             
}
 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
draw_set_font(global.wdigits)
draw_set_halign(1)
draw_set_valign(1)
draw_set_color(make_color_rgb(247, 208, 74))

//Passa por todos os clientes desenhando eles de acordo com a sua posição etc.
var player_count = ds_list_size(server_playerlist_name)
for (var i=0; i&lt;player_count; i+=1)
{
    var xx, yy;
    xx = server_playerlist_x[| i]
    yy = server_playerlist_y[| i]
    draw_sprite(spr_mario_small_walk, 0, xx, yy)
    
    //Desenha o ID do Cliente seguido de seu nome.
    draw_text(xx + 16, yy - 12, string(server_playerlist_id[| i])  + ' - ' + server_playerlist_name[| i])
};

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
