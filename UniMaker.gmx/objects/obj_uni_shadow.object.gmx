<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>293</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*s_surface = surface_create(room_width,room_height);
fade = 0.5;
white = 0;
event_user(0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//surface_free(s_surface);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*if(global.shadow == 0){

    if(surface_exists(s_surface))
        surface_free(s_surface);
};
else{

    //SE surface n√£o existir... Re-criar
    if(!surface_exists(s_surface))
        s_surface = surface_create(room_width,room_height);
    
    //Cobrir surface de branco e deixar transparente (BUG FIX)
    surface_set_target(s_surface);
    draw_clear_alpha(c_white,0.2);
    if(global.uni_play == 0){
        event_user(2);
    }
    else{
        event_user(1);
    };
    surface_reset_target();
};
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Cor
/*if(global.uni_level_style == 19)
&amp;&amp;(global.custom_scenery_color_shadow == 1)
    white = 1;
else
    white = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Sombras - UniMaker
/*with(obj_uni_parent_resource){

    //Cancelar evento para objeto oculto
    if(object_index == obj_uni_demo2_bgo1)
    ||(object_index == obj_uni_demo2_bgo2)
    ||(object_index == obj_uni_demo2_bgo3)
    ||(object_index == obj_uni_demo2_bgo4)
    ||(object_index == obj_uni_demo_75)
    ||(object_index == obj_uni_startsing)
        exit;
        
    if(alarm[0] == -1)
    &amp;&amp;(visible == 1)
        event_perform(ev_draw,0);
};
with(obj_uni_parent_sizabledraw){
    event_user(type);
};
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Sombras - UniPlayer
/*
//Player
with(obj_mario){if(visible == 1){event_perform(ev_draw,0);};};
with(obj_deadmario){if(visible == 1){event_perform(ev_draw,0);};};
with(obj_goalmario){if(visible == 1){event_perform(ev_draw,0);};};
with(obj_spinner){if(visible == 1){event_perform(ev_draw,0);};};

//Parents
with(obj_blockparent){if(visible == 1){event_perform(ev_draw,0);};};
with(obj_grayblockparent){if(visible == 1){event_perform(ev_draw,0);};};
with(obj_physicsparent){if(visible == 1){event_perform(ev_draw,0);};};
with(obj_enemy_dead){if(visible == 1){event_perform(ev_draw,0);};};
with(obj_enemy_multidead){if(visible == 1){event_perform(ev_draw,0);};};
with(obj_enemy_stomped){if(visible == 1){event_perform(ev_draw,0);};};
with(obj_enemy_frozen){if(visible == 1){event_perform(ev_draw,0);};};
with(obj_enemy_frozen2){if(visible == 1){event_perform(ev_draw,0);};};
with(obj_bossparent){if(visible == 1){event_perform(ev_draw,0);};};

//Geral
with(obj_coin){if(visible == 1){event_perform(ev_draw,0);};};
with(obj_pcoin){if(visible == 1){event_perform(ev_draw,0);};};
with(obj_flippers_bottom){if(visible == 1){event_perform(ev_draw,0);};};
with(obj_flippers_top){if(visible == 1){event_perform(ev_draw,0);};};
with(obj_flippers_left){if(visible == 1){event_perform(ev_draw,0);};};
with(obj_flippers_right){if(visible == 1){event_perform(ev_draw,0);};};
with(obj_fallingspike){if(visible == 1){event_perform(ev_draw,0);};};
with(obj_platform_automoving){if(visible == 1){event_perform(ev_draw,0);};};
with(obj_expandplatform_hv){if(visible == 1){event_perform(ev_draw,0);};};
with(obj_expandplatform_h){if(visible == 1){event_perform(ev_draw,0);};};
with(obj_expandplatform_v){if(visible == 1){event_perform(ev_draw,0);};};
with(obj_arrowplatform){if(visible == 1){event_perform(ev_draw,0);};};
with(obj_engineblock_h){if(visible == 1){event_perform(ev_draw,0);};};
with(obj_engineblock_v){if(visible == 1){event_perform(ev_draw,0);};};
with(obj_diacannon){if(visible == 1){event_perform(ev_draw,0);};};
with(obj_bulletblaster){if(visible == 1){event_perform(ev_draw,0);};};
with(obj_bulletblaster_2){if(visible == 1){event_perform(ev_draw,0);};};
with(obj_frozenenemy_pickup){if(visible == 1){event_perform(ev_draw,0);};};
with(obj_bluebrick){if(visible == 1){event_perform(ev_draw,0);};};
with(obj_onoffplatform){if(visible == 1){event_perform(ev_draw,0);};};
with(obj_vine){if(visible == 1){event_perform(ev_draw,0);};};
with(obj_beanstalk){if(visible == 1){event_perform(ev_draw,0);};};
with(obj_coinchain){if(visible == 1){event_perform(ev_draw,0);};};
with(obj_veggiecoin){if(visible == 1){event_perform(ev_draw,0);};};
with(obj_blockcoin){if(visible == 1){event_perform(ev_draw,0);};};
with(obj_arrowplatform_move){if(visible == 1){event_perform(ev_draw,0);};};
with(obj_expandplatblock){if(visible == 1){event_perform(ev_draw,0);};};
with(obj_thrownbrick){if(visible == 1){event_perform(ev_draw,0);};};
with(obj_coinchange){if(visible == 1){event_perform(ev_draw,0);};};
with(obj_powerupsprout){if(visible == 1){event_perform(ev_draw,0);};};
with(obj_yoshi){if(visible == 1){event_perform(ev_draw,0);};};

//Modelos
with(obj_modelsolid){if(visible == 1){event_perform(ev_draw,0);};};
with(obj_modelsolidtop){if(visible == 1){event_perform(ev_draw,0);};};
with(obj_modelpipe){if(visible == 1){event_perform(ev_draw,0);};};
with(obj_modelclimb){if(visible == 1){event_perform(ev_draw,0);};};
with(obj_modelhurt){if(visible == 1){event_perform(ev_draw,0);};};
with(obj_modelhurt_solid){if(visible == 1){event_perform(ev_draw,0);};};
with(obj_modebrigde){if(visible == 1){event_perform(ev_draw,0);};};
with(obj_modebrigde){if(visible == 1){event_perform(ev_draw,0);};};
with(obj_modelsizable){event_user(type);};
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Atualizar tamanho
/*if(global.shadow == 1){

    if(surface_exists(s_surface))    
        surface_resize(s_surface,room_width,room_height);
    else
        s_surface = surface_create(room_width,room_height);
    event_user(3)
};
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*if(global.shadow == 1){
    
    if((shaders_are_supported())&amp;&amp;(shader_is_compiled(sha_invert)))
    &amp;&amp;(white == 1)
        shader_set(sha_invert);
        
    draw_surface_ext(s_surface,3,3,1,1,0,c_black,fade);
    shader_reset();
};
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
