<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_fences</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>11</depth>
  <persistent>0</persistent>
  <parentName>obj_uni_parent_resource</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//RESOURCE PARENT
event_inherited();
sizable = 4;
style = 0;
szb_drawtype = 0;
size_limit_x = 27;
size_limit_y = 45;
mysizable = noone;
szb_mydrag = 0;
size_x = 2;
size_y = 2;
alarm[3] = 2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Definições do Sizable
        mask_index = spr_square;
        image_xscale = size_x;
        image_yscale = size_y;
        event_user(6);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Agarrar (D'n'D)
if!(instance_exists(obj_uni_creation_preview)){
    
    //Voltar para posição inicial
    x = x_start
    y = y_start
    x_draw = x_start
    y_draw = y_start
           
    drop_lock = 0;
    
    global.uni_cursor = 0;
    with(obj_uni_cursor_sprite) event_user(0);
    global.resource_block = 0;
    
    instance_destroy();
    alarm[0] = -1;
    exit;
}

//Se estiver segurando o objeto...
if(drag == true){
    
    //Se estiver na area de algum objeto, mas que não sejá sua própria area...
    if (place_meeting(obj_uni_creation_preview.x,obj_uni_creation_preview.y,obj_uni_demo_71_3))
        //Impedir que coloque nesta area
        drop_lock = true;
    else 
        //Permitir que coloque nesta area
        drop_lock = false;
    
    //Por a frente de todos
    depth = -19;
    
    //Posicionar sprite principal no mouse.
    x_draw = mouse_x-8;
    y_draw = mouse_y-8;
    x = floor(mouse_x/16)*16;
    y = floor(mouse_y/16)*16;
    
        instance_activate_object(mysizable);
        with(mysizable){
                
            depth = -18;
            x = other.x_draw;
            y = other.y_draw;
        };
        
    //Travar editor
    global.uni_play_lock = true; 
    
    //Loop
    alarm[0] = 1;
}
else{
    //Se estiver impedido de por em alguma area
    if (drop_lock == true){
        
        //Voltar para posição inicial
        x = x_start
        y = y_start
        
        //Alinhar na grade
        move_snap(16,16);
    }
    else{

        //Por na posição atual
        x = obj_uni_creation_preview.x;
        y = obj_uni_creation_preview.y;
        
        //Seguir a posição normal
        x = x;
        y = y;
  
        //Alinhar na grade
        move_snap(16,16);
        audio_playstop_sound(snd_uni_object_drop,0,false); 
    }
    //Desativar a var que impede/permite por objeto
    drop_lock = false;
    
    //Por na 'layer' original
    depth = layer;
    
    //Retornar na posição do sprite
    x_draw = x;
    y_draw = y;
    
    //Destravar editor
    global.uni_play_lock = false;
    
        //Definir profundidade de acordo com altura
        if(drag == false)
            depth = 11;
        
        if(sizable == 1)
            alarm[3] = 2;
    //Parar 'Loop'
    //alarm[0] = -1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="8">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Sizable - Controle de Tamanho
    if(szb_mydrag != 0){
    
        global.uni_editor_activity = true;
        szb_mydrag = 0;
    };
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
//Sizable - Controle de Tamanho

    if(szb_mydrag != 0){
    
        global.uni_editor_activity = 1;
        szb_mydrag = 0;
    };
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
//Sizable - Controle de Tamanho
if(drag == true){

    if(szb_mydrag == 0){
    
        global.uni_editor_activity = 0;
        szb_mydrag = 1;
    };
    else{
    
        //Horizontal
        {
        
            if(keyboard_check_pressed(vk_right)){
                if(size_x &lt; size_limit_x)
                    size_x++;
                alarm[3] = 1;
            };
            else if(keyboard_check_pressed(vk_left)){
                if(size_x &gt; 2)
                    size_x--;
                alarm[3] = 1;
            };
            else{
            
                if(keyboard_check_pressed(ord("D"))){
                    if(size_x &lt; size_limit_x)
                        size_x++;
                    alarm[3] = 1;
                };
                else if(keyboard_check_pressed(ord("A"))){
                    if(size_x &gt; 2)
                        size_x--;
                    alarm[3] = 1;
                };  
            };
            
            //Limitar tamanho minimo
            if(size_x &lt;= 2)
                size_x = 2;
        
            //Definir tamanho da colisão
            image_xscale = size_x;
        };
             
        //Vertical
        {
        
            if(keyboard_check_pressed(vk_down)){
                if(size_y &lt; size_limit_y)
                    size_y++;
                alarm[3] = 1;
            };
            else if(keyboard_check_pressed(vk_up)){
                if(size_y &gt; 2)
                    size_y--;
                alarm[3] = 1;
            };
            else{
            
                if(keyboard_check_pressed(ord("S"))){
                    if(size_y &lt; size_limit_y)
                        size_y++;
                    alarm[3] = 1;
                };
                else if(keyboard_check_pressed(ord("W"))){
                    if(size_y &gt; 2)
                        size_y--;
                    alarm[3] = 1;
                };        
            };
            
            //Limitar tamanho minimo
            if(size_y &lt;= 2)
                size_y = 2;
        };
    };
};
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="16">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>sprite_index = spr_semisolid;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Play
with(instance_create(x,y,obj_modelsizable)){

    sprite_index = other.sprite_index;
    depth = other.depth;
    image_xscale = other.image_xscale;
    image_yscale = other.image_yscale;
    size_x = other.size_x;
    size_y = other.size_y;
    style = other.style;
    mysolid = instance_create(x,y,obj_climb);
    mysolid.image_xscale = other.size_x;
    mysolid.image_yscale = other.size_y;
    type = 2;
};

if(global.uni_mode == 1)
    instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Carregar dados
event_inherited();
size_x = ds_list_find_value(global.uni_objects_datalist,global.uni_readpos);
global.uni_readpos+=1;
size_y = ds_list_find_value(global.uni_objects_datalist,global.uni_readpos);
global.uni_readpos+=1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Salvar dados
event_inherited();
ds_list_add(global.uni_objects_datalist,size_x);
ds_list_add(global.uni_objects_datalist,size_y);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Desenho do sprite e painel
if(global.uni_play == 1)
    exit;
    
//Painel
if(drag == true){
    //Se puder por o objeto nesse local
    var pcol;
    if(drop_lock == true)
        pcol = c_red;
    else
        pcol = c_white;
    draw_sprite_ext(spr_uni_demo_2,1,x,y,size_x,size_y,0,pcol,0.5);
}

///Desenho
 
//Pedaços do sprite
var o, _vframe;
for(o = 0; o &lt; size_y; o++){

    var i, _hframe;
    for(i = 0; i &lt; size_x; i++){

        //Horizontal
        if(i == 0)
            _hframe = 0;            
        else if(i == size_x-1)
            _hframe = 2;
        else
            _hframe = 1;
                    
        //Vertical
        if(o == 0)
            _vframe = 0
        else if(o == size_y-1)
            _vframe = 2;
        else
            _vframe = 1;
        
        //Sprite
        draw_sprite_part_ext(global.theme_spritesheet,global.uni_level_style,128+(global.theme_customanim*208)+(_hframe*16),208+(_vframe*16),16,16,x_draw+i*16,y_draw+o*16,1,1,c_white,1);
    };
};
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
