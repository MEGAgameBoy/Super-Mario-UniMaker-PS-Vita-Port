<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_coin</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>-19</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Manages the level, and required for all levels
image_speed = 0.25;
//Make the view follow along
view_object[0] = id

savetime = global.uni_level_time;
if(global.uni_level_time &gt; -1){

    if global.uni_level_time &lt;= 100
    {
        alarm[3] = 1;
    }
    alarm[2] = 60
};
    

//Animation variable
anim = 0

//Increment animation variable
alarm[5] = 7

//Enforce barrier
alarm[6] = 3

//P-Switch is off
switchon = 0

//Enable P-Meter
alarm[7] = 15
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.uni_level_time = savetime;
global.onoffblock = 0;
score = 0;
global.coins = 0;
lives = 3;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Make the screen shake when thwomp sound plays
if audio_is_playing(snd_thwomp)
{
    if anim%2
        view_yview[0] += 4
    else
        view_yview[0] -= 4
    alarm[11] = 7
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Turns off the P-Switch

//If the P-Switch is on
if switchon = 1
{

    //Turn off the P-Switch
    switchon = 0

    //Swap coins with bricks and bricks with coins
    event_user(2)

    //Make P-Coins invisible
    instance_activate_object(obj_pcoin)
    with obj_pcoin visible = 0

    //Stop the switch song
    audio_stop_sound(global.uni_musicpack[55]) //P-Switch

    //Restart the starman music if it was stopped due to overlap
    if instance_exists(obj_invincibility)
        audio_play_sound(global.uni_musicpack[54],99,1) //Super Star
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="9">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Make the P-Meter flash

//If Mario is no longer fast enough, and on the ground
if instance_exists(obj_mario)
and abs(obj_mario.hspeed) &lt;= 2.8
and obj_mario.state &lt; 2
{

    //Stop the annoying sound
    //audio_stop_sound(snd_pmeter)

    //Make the P-Meter not maxed out
    global.pmeter = 5

    //Continue the P-Meter loop
    alarm[7] = 15

}

//Otherwise, if the P-Meter is still maxed out
else if global.pmeter &gt; 5
{

    //Flash between frames 6 and 7
    if global.pmeter = 6
        global.pmeter = 7
    else
        global.pmeter = 6

    //Continue flashing
    alarm[9] = 7

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="8">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///End the P-Meter flight time
if global.pmeter &gt; 5
{

    //If Mario is still running, keep the meter on
    if instance_exists(obj_mario)
    and abs(obj_mario.hspeed) &gt; 2.8
    and obj_mario.state &lt; 2
        alarm[8] = 100

    //Otherwise
    else
    {

        //Stop the annoying sound
        //audio_stop_sound(snd_pmeter)

        //Make the P-Meter not maxed out
        global.pmeter = 5

        //Continue the P-Meter loop
        alarm[7] = 15

    }

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///P-Meter loop

//If Mario exists
if instance_exists(obj_mario)
{

    //If Mario is running fast enough
    if abs(obj_mario.hspeed) &gt; 2.8
    and obj_mario.state = 1
    {

        //Increment the P-Meter if it is not maxed out
        if global.pmeter &lt; 6
            global.pmeter++

    }

    //If Mario is too slow, or not running, and the P-Meter is not too low, decrement slowly
    else if global.pmeter &gt; 0
    and global.slowdown = 2
        global.pmeter--

    //Slow down decrements
    global.slowdown++

    //Restart decrement timer
    if global.slowdown = 3
        global.slowdown = 0

}

//Otherwise, decrement the P-Meter
else if global.pmeter &gt; 0
    global.pmeter--

//If the P-Meter is maxed out
if global.pmeter = 6
{

    //Play that annoying sound
    //audio_play_sound(snd_pmeter,1,1)

    //Limit the P-Meter flight time
    alarm[8] = 300

    //Make the P-Meter flash
    alarm[9] = 7

}

//Otherwise, continue the loop
else
    alarm[7] = 15
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="6">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Enforce barrier
global.barrier = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Increment animation variable
anim++

//Continue incrementing
alarm[5] = 7
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Kill Mario

//If Mario exists
if instance_exists(obj_mario)
{

    //Kill Mario
    instance_create(obj_mario.x,obj_mario.y,obj_deadmario)
    with obj_mario instance_destroy()

}

//Otherwise, delay the inevitable
else
    alarm[4] = 1
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Tocar 'Hurry Up!'
//Atrasar o som se a música de Superstar/P-Switch está tocando
if (audio_is_playing(global.uni_musicpack[54])) //Super Star
or (audio_is_playing(global.uni_musicpack[55])) //P-Switch
{
    alarm[3] = 2;
}
else
{
    //'Hurry up!'
    audio_play_sound(snd_hurryup,1,0);
    //Parar música
    //alarm[2] = 2;
    //Tocar a música depois do som 'Hurry Up!' acabar
    //alarm[0] = 175;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Decrement the time variable

//If there is time left
if global.uni_level_time &gt; 0
{
    //Play the hurry up sound at 100 seconds left
    if global.uni_level_time == 101
    {
        alarm[3] = 1;
    }


    //Decrement
    if!(instance_exists(obj_deadmario)){
        global.uni_level_time--
    
        //Decrement the time again after a second
        alarm[2] = 60
    }
    else
        alarm[4] = 1;
}
else    
    alarm[4] = 1
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Deals with various game logic stuff
//Follow the autoscroll if it exists
if instance_exists(obj_uni_autoscroll){

    x = obj_uni_autoscroll.x
    if(instance_exists(obj_mario))
    y = obj_mario.y+16;
    else
    y = y;
}
//Follow Mario if he exists
else if instance_exists(obj_mario)
{
    x = obj_mario.x
    y = obj_mario.y+16
}

//Follow goal Mario if he exists
else if instance_exists(obj_goalmario)
{
    if(obj_goalmario.ready == 0){
    x = obj_goalmario.x
    y = obj_goalmario.y+16
    }
}
else if instance_exists(obj_deadmario)
{
    x = obj_deadmario.x
    //y = obj_deadmario.y+16
}

//Follow Mario for level start only
if(obj_uni_editor.level_start = true){
 if instance_exists(obj_uni_startsing)
{
    x = obj_uni_startsing.x
    y = obj_uni_startsing.y+16
}
}

/*else{
 x = view_xview[0];
 y = view_yview[0];
}*/

//Do not let the screen fall behind the classic scroll
if instance_exists(obj_uni_classicscroll){
if x &lt; obj_uni_classicscroll.x
    x = obj_uni_classicscroll.x
}

//Round position variables
x = round(x)
y = round(y)

//If the barrier is enforced, and Mario exists
if global.barrier = 0
and instance_exists(obj_mario)
{

    //If space is pressed, drop the reserve item
    if keyboard_check_pressed(vk_space)
    and obj_mario.disablecontrols = 0
        event_user(4)

    //If Mario moves off the left side of the screen
    if obj_mario.x &lt; view_xview[0]+5
    {

        //Snap Mario to the side of the screen
        obj_mario.x = view_xview[0]+5

        //Stop Mario if he keeps trying to move off
        if obj_mario.hspeed &lt; 0
            obj_mario.hspeed = 0

        //Stop sliding Mario if he keeps trying to move off (Sneaky!)
        if instance_exists(obj_slider)
            obj_slider.x = view_xview[0]+5

    }

    //If Mario moves off the right side of the screen
    else if obj_mario.x &gt; view_xview[0]+view_wview[0]-5
    {

        //Snap Mario to the side of the screen
        obj_mario.x = view_xview[0]+view_wview[0]-5

        //Stop Mario if he keeps trying to move off
        if obj_mario.hspeed &gt; 0
            obj_mario.hspeed = 0

        //Stop sliding Mario if he keeps trying to move off (Sneaky!)
        if instance_exists(obj_slider)
            obj_slider.x = view_xview[0]+view_wview[0]-5

    }

}

//If there are over 99 coins collected
if global.coins &gt; 99
{

    //Subtract 100 coins
    global.coins -= 100

    //Create the extra life on Mario if he exists
    if instance_exists(obj_mario)
        with instance_create(obj_mario.x-8,obj_mario.y,obj_score) event_user(7)

    //Otherwise, create the extra life on the level manager
    else
        with instance_create(x-8,y,obj_score) event_user(7)

}

//Make the screen shake if thwomp sound plays
if not audio_is_playing(snd_thwomp)
    alarm[11] = 2
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Swap coins with bricks and bricks with coins

//Turn bricks into fake coins
instance_activate_object(obj_brick);
with obj_brick
{
    instance_create(x,y,obj_coinchange)
    instance_activate_object(mysolid)
    with(mysolid) instance_destroy();
    instance_destroy()
}

//Turn coins into bricks
instance_activate_object(obj_coin);
with obj_coin
{
    instance_create(x,y,obj_brick)
    instance_destroy()
}

//Turn fake coins into coins
instance_activate_object(obj_coinchange);
with obj_coinchange
{
    instance_create(x,y,obj_coin)
    instance_destroy()
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Turns on the P-Switch

//If the P-Switch is off
if switchon = 0
{

    //Turn on the P-Switch
    switchon = 1

    //Swap coins with bricks and bricks with coins
    event_user(2)

    //Make P-Coins visible
    instance_activate_object(obj_pcoin);
    with obj_pcoin visible = 1

    //Start the switch song if it is not playing, and stop the regular music
    if not audio_is_playing(global.uni_musicpack[55]) //P-Switch
    {
        audio_play_sound(global.uni_musicpack[55],99,1) //P-Switch
    }

    //Prevent the starman music from overlapping
    audio_stop_sound(global.uni_musicpack[54]) //Super Star
}
else{

    audio_stop_sound(global.uni_musicpack[55])
    audio_play_sound(global.uni_musicpack[55],99,1) //P-Switch

};
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
