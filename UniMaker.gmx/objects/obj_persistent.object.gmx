<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-99</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Hello Mario Engine's persistent object
debug = false;

//Tempo Editando
edit_hour = 0;
edit_min = 0;

//Declare global variables
scr_init_globals()
scr_uni_globals_vars()

wx = window_get_x();
wy = window_get_y();
ww = window_get_width();
wh = window_get_height();

//How the screen is fading
//0: From black, 1: To black
mode = 0
_fs = 0;

//How much the screen is faded
done = 0
filter = 0;

//Screenshot of the game, if it exists
back = -1

//Message to display to the screen
message = ""

//Whether to show the FPS
showfps = 0

//Item that is being carried between rooms
global.carrieditem = noone

//The sprite used by an item carried between rooms
global.carriedsprite = noone

//Whether Mario should hold/carry an object
global.shallihold = 0

//Font for small letters
global.font = font_add_sprite_ext(spr_spritefont,'!"'+"#$%&amp;'()*+,-./0123456789:;&lt;=&gt;?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~",0,0);
global.font_inv = font_add_sprite_ext(spr_spritefont_inv,'!"'+"#$%&amp;'()*+,-./0123456789:;&lt;=&gt;?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~",0,0);

global.fontclassic = font_add_sprite_ext(spr_classicfont,"0123456789/",0,0);

keyboard_set_map(ord('X'),vk_shift)
keyboard_set_map(ord('Z'),vk_control)
keyboard_set_map(ord('P'),vk_shift)
keyboard_set_map(ord('O'),vk_control)
keyboard_set_map(ord('W'),vk_up)
keyboard_set_map(ord('A'),vk_left)
keyboard_set_map(ord('S'),vk_down)
keyboard_set_map(ord('D'),vk_right)

//Handle gamepad support
gamepad = gamepad_is_connected(0)

//Gamepad left stick
var gp_init;
for(gp_init = 0; gp_init &lt; 12; gp_init += 1){

    leftstick[0,gp_init] = 0
    leftstick[1,gp_init] = 0
    leftstick[2,gp_init] = 0
    leftstick[3,gp_init] = 0
};

//Set the epsilon value for floating point numbers
math_set_epsilon(0.00001)

//Disable application surface automatic drawing
application_surface_draw_enable(0)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Because GM: Studio is buggy, delay applying settings

//Apply fullscreen
//window_set_fullscreen(fullscreen)

//Apply filtering and VSync
event_user(1)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Go to the title screen
scr_settings_load();
room_goto(rm_uni_title);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Center the window
window_center();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Deactivate everything
instance_deactivate_all(1)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stop fading to black

//Set mode to fade from black
mode = 0

//Begin fading from black
done = 0

//Activate everything
instance_activate_all()

//Resume particles
part_system_automatic_update(1,1)

//Delete the screenshot
if background_exists(back)
    background_delete(back)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///CONTROLES EXTERNOS
if global.gamepad == 1{

var gp_count;
for(gp_count = 0; gp_count &lt; 11; gp_count += 1){

    if(gamepad_is_connected(gp_count)){
    
    //Up on left stick
    if leftstick[0,gp_count] = 0
    and gamepad_axis_value(gp_count,gp_axislv) &lt;= -0.5
    {
        leftstick[0,gp_count] = 1
        keyboard_key_press(vk_up)
    }
    else if leftstick[0,gp_count] = 1
    and gamepad_axis_value(gp_count,gp_axislv) &gt; -0.5
    {
        leftstick[0,gp_count] = 0
        keyboard_key_release(vk_up)
    }

    //Down on left stick
    if leftstick[1,gp_count] = 0
    and gamepad_axis_value(gp_count,gp_axislv) &gt;= 0.5
    {
        leftstick[1,gp_count] = 1
        keyboard_key_press(vk_down)
    }
    else if leftstick[1,gp_count] = 1
    and gamepad_axis_value(gp_count,gp_axislv) &lt; 0.5
    {
        leftstick[1,gp_count] = 0
        keyboard_key_release(vk_down)
    }

    //Left on left stick
    if leftstick[2,gp_count] = 0
    and gamepad_axis_value(gp_count,gp_axislh) &lt;= -0.5
    {
        leftstick[2,gp_count] = 1
        keyboard_key_press(vk_left)
    }
    else if leftstick[2,gp_count] = 1
    and gamepad_axis_value(gp_count,gp_axislh) &gt; -0.5
    {
        leftstick[2,gp_count] = 0
        keyboard_key_release(vk_left)
    }

    //Right on left stick
    if leftstick[3,gp_count] = 0
    and gamepad_axis_value(gp_count,gp_axislh) &gt;= 0.5
    {
        leftstick[3,gp_count] = 1
        keyboard_key_press(vk_right)
    }
    else if leftstick[3,gp_count] = 1
    and gamepad_axis_value(gp_count,gp_axislh) &lt; 0.5
    {
        leftstick[3,gp_count] = 0
        keyboard_key_release(vk_right)
    }

    //Up on d-pad
    if gamepad_button_check_pressed(gp_count,gp_padu)
        keyboard_key_press(vk_up)
    else if gamepad_button_check_released(gp_count,gp_padu)
        keyboard_key_release(vk_up)

    //Down on d-pad
    if gamepad_button_check_pressed(gp_count,gp_padd)
        keyboard_key_press(vk_down)
    else if gamepad_button_check_released(gp_count,gp_padd)
        keyboard_key_release(vk_down)

    //Left on d-pad
    if gamepad_button_check_pressed(gp_count,gp_padl)
        keyboard_key_press(vk_left)
    else if gamepad_button_check_released(gp_count,gp_padl)
        keyboard_key_release(vk_left)

    //Right on d-pad
    if gamepad_button_check_pressed(gp_count,gp_padr)
        keyboard_key_press(vk_right)
    else if gamepad_button_check_released(gp_count,gp_padr)
        keyboard_key_release(vk_right)
    
    //Generico (DirecInput)
    if(gp_count &gt; 3){
    
        //1,4 button
        if gamepad_button_check_pressed(gp_count,gp_face3)
            keyboard_key_press(vk_shift)
        else if gamepad_button_check_released(gp_count,gp_face3)
            keyboard_key_release(vk_shift)
        if gamepad_button_check_pressed(gp_count,gp_face2)
            keyboard_key_press(vk_shift)
        else if gamepad_button_check_released(gp_count,gp_face2)
            keyboard_key_release(vk_shift)
    
        //2,3 button
        if gamepad_button_check_pressed(gp_count,gp_face1)
            keyboard_key_press(vk_control)
        else if gamepad_button_check_released(gp_count,gp_face1)
            keyboard_key_release(vk_control)
        if gamepad_button_check_pressed(gp_count,gp_face4)
            keyboard_key_press(vk_control)
        else if gamepad_button_check_released(gp_count,gp_face4)
            keyboard_key_release(vk_control)
    };
    //XBOX (XInput)
    else{
    
        //A,B button
        if gamepad_button_check_pressed(gp_count,gp_face1)
            keyboard_key_press(vk_shift)
        else if gamepad_button_check_released(gp_count,gp_face1)
            keyboard_key_release(vk_shift)
        if gamepad_button_check_pressed(gp_count,gp_face2)
            keyboard_key_press(vk_shift)
        else if gamepad_button_check_released(gp_count,gp_face2)
            keyboard_key_release(vk_shift)
    
        //X,Y button
        if gamepad_button_check_pressed(gp_count,gp_face4)
            keyboard_key_press(vk_control)
        else if gamepad_button_check_released(gp_count,gp_face4)
            keyboard_key_release(vk_control)
        if gamepad_button_check_pressed(gp_count,gp_face3)
            keyboard_key_press(vk_control)
        else if gamepad_button_check_released(gp_count,gp_face3)
            keyboard_key_release(vk_control)    
    };
    
    //Triggers
    if gamepad_button_check_pressed(gp_count,gp_shoulderl){
        keyboard_key_press(vk_up)
        keyboard_key_press(vk_shift)
    };
    else if gamepad_button_check_released(gp_count,gp_shoulderl){
        keyboard_key_release(vk_up)
        keyboard_key_release(vk_shift)
    };
    if gamepad_button_check_pressed(gp_count,gp_shoulderr){
        keyboard_key_press(vk_up)
        keyboard_key_press(vk_shift)
    };
    else if gamepad_button_check_released(gp_count,gp_shoulderr){
        keyboard_key_release(vk_up)
        keyboard_key_release(vk_shift)
    };
    if gamepad_button_check_pressed(gp_count,gp_shoulderlb){
        keyboard_key_press(vk_up)
        keyboard_key_press(vk_shift)
    };
    else if gamepad_button_check_released(gp_count,gp_shoulderlb){
        keyboard_key_release(vk_up)
        keyboard_key_release(vk_shift)
    };
    if gamepad_button_check_pressed(gp_count,gp_shoulderrb){
        keyboard_key_press(vk_up)
        keyboard_key_press(vk_shift)
    };
    else if gamepad_button_check_released(gp_count,gp_shoulderrb){
        keyboard_key_release(vk_up)
        keyboard_key_release(vk_shift)
    };
                
    //Start button
    if gamepad_button_check_pressed(gp_count,gp_start)
        keyboard_key_press(vk_enter)
    else if gamepad_button_check_released(gp_count,gp_start)
        keyboard_key_release(vk_enter)

    //Select button
    if gamepad_button_check_pressed(gp_count,gp_select)
        keyboard_key_press(vk_space)
    else if gamepad_button_check_released(gp_count,gp_select)
        keyboard_key_release(vk_space)
    
    };
    if(gp_count &gt;= 11)
        gp_count = 0;
};
};
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Set up the display
window_set_min_width(432*2);
window_set_min_height(240*2);
display_set_gui_size(window_get_width(),window_get_height());

if(global.frameskip == 1){

    repeat(3){
    
        _fs =! _fs;
        if(_fs == 1)
            draw_enable_drawevent(1);
        else
            draw_enable_drawevent(0);
    };
};
else
    draw_enable_drawevent(1);
    
///DEBUG: Mostrar objetos ocultos
if(debug == true){

     //Colisões
     with(obj_solid) visible = true;
     with(obj_solidtop) visible = true;
     with(obj_climb) visible = true;
     with(obj_climb_net) visible = true;
     with(obj_slippery) visible = true;
     with(obj_hurtsolid) visible = true;
     with(obj_swim) visible = true;
     with(obj_slopeparent) visible = true;
     //UniMaker
     with(obj_uni_tile_trigger) visible = true;

};
if(global.filter == 1)
    texture_set_interpolation(true);
else
    texture_set_interpolation(false);
    
if!(instance_exists(obj_uni_layout_levelstyles_back)){

    if(instance_exists(obj_uni_saveload_control)){
    
        if(obj_uni_saveload_control.alarm[0] != -1)
        ||(obj_uni_saveload_control.alarm[1] != -1)
        ||(obj_uni_saveload_control.alarm[2] != -1)
            exit;
    }
    if(global.screenprotector == 1){
    
        if(!window_has_focus())
            audio_master_gain(0.3);
        else
            audio_master_gain(1);
    }
    else
        audio_master_gain(1);
};

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set up the screen to be displayed
wx = window_get_x();
wy = window_get_y();
ww = window_get_width();
wh = window_get_height();

if(global.vbm == 2)
    display_set_windows_vertex_buffer_method(vbm_most_compatible)
else if(global.vbm == 1)
    display_set_windows_vertex_buffer_method(vbm_fast)
else
    display_set_windows_vertex_buffer_method(vbm_compatible)
    
//Reset display
display_reset(0,global.vsync);
if(global.vsync == 2)
    display_set_windows_alternate_sync(1);
else
    display_set_windows_alternate_sync(0);
    
window_set_size(432*2,240*2);
alarm[2] = 2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Fade the screen to black

//If this event was called manually
if mode = 0
{

    //Take a screenshot
    back = background_create_from_surface(application_surface,0,0,view_wview[0],view_hview[0],0,0)

    //Pause particles
    part_system_automatic_update(1,0)

    //Deactivate everything
    instance_deactivate_all(1)

}

//Start fading
done = 0

//To black
mode = 1

//Make sure it stops when its done
alarm[0] = 30
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Prepare to fade to black

//Fade to black
mode = 1

//Take a screenshot
back = background_create_from_surface(application_surface,0,0,view_wview[0],view_hview[0],0,0)

//Set alarm to execute when the next room starts
alarm[1] = 1
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Fade the screen to black, unless you just opened up the game
if mode = 1
    event_user(0);

edit_hour = 0;
edit_min = 0;
event_user(2);
cleanmem();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Save Settings
scr_settings_save();
cleanmem_init(1);

//PLAY - EDIT MODE
var m2;
for(m2=0; m2&lt;72; m2+=1){
    audio_destroy_stream(global.uni_musicpack[m2]);
};
audio_destroy_stream(global.custom_music_play);
audio_destroy_stream(global.custom_music_edit);
directory_destroy_fmns(global.user_directory+"\");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Load Settings
window_set_size(864,480);
cleanmem_init(0);
alarm[4] = 2;

//Custom
global.custom_scenery_sprsheet = sprite_duplicate(spr_custom);    
global.custom_scenery_bg_sprite = sprite_duplicate(spr_background);
var fgfx = 0;
repeat(5){
global.custom_effect_sprite[fgfx] = sprite_duplicate(spr_effect);
fgfx++;
};
global.custom_music_play = audio_create_stream(global.game_directory+"_ctp.ogg");
global.custom_music_edit = audio_create_stream(global.game_directory+"_cte.ogg");
global.custom_music_ambience = audio_create_stream(global.game_directory+"_cta.ogg");
scr_uni_custom("",1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///SURFACE PRINCIPAL
draw_enable_alphablend(0)
if(shaders_are_supported()){
    
    //HQ2X Filtering
    if global.filter = 2
    &amp;&amp;(shader_is_compiled(sha_hq2x))
    {
        shader_set(sha_hq2x);
        draw_surface_stretched(application_surface,0,0,window_get_width(),window_get_height());
        shader_reset();
    }
    
    //HQ4X Filtering
    else if global.filter = 3
    &amp;&amp;(shader_is_compiled(sha_hq4x))
    {
        shader_set(sha_hq4x);
        draw_surface_stretched(application_surface,0,0,window_get_width(),window_get_height());
        shader_reset();
    }
    
    //CRT Filtering
    else if global.filter = 4
    &amp;&amp;(shader_is_compiled(sha_crt))
    {
        shader_set(sha_crt);
        shader_set_uniform_f(shader_get_uniform(sha_crt, "u_crt_sizes"), surface_get_width(application_surface), surface_get_height(application_surface), view_wview[0]*3, view_hview[0]*3); //Tamanho
        shader_set_uniform_f(shader_get_uniform(sha_crt, "distort"), true);
        shader_set_uniform_f(shader_get_uniform(sha_crt, "distortion"), 0.12);
        shader_set_uniform_f(shader_get_uniform(sha_crt, "border"), true);
        draw_surface_stretched(application_surface,0,0,window_get_width(),window_get_height());
        shader_reset();
    };
    //No Filter
    else
        draw_surface_stretched(application_surface,0,0,window_get_width(),window_get_height());
}
else
    draw_surface_stretched(application_surface,0,0,window_get_width(),window_get_height());

draw_enable_alphablend(1);

//Fades the screen to and from black
if done &lt; 1
{

    //Increment fading
    done += 1/30

    //Fade from black
    if mode = 0
        draw_set_alpha(1-done)

    //Fade to black
    else
        draw_set_alpha(done)

    //Draw the fade
    draw_set_color(c_black)
    draw_rectangle(0,0,5000,5000,0)
    draw_set_alpha(1)
    draw_set_color(c_white)

}

//Protetor de tela
if(global.screenprotector == 1){

    if(!window_has_focus()){

        draw_set_colour(c_black);
        draw_set_alpha(0.5);
        draw_rectangle(view_xview[0]-4000,view_yview[0]-4000,view_xview[0]+4000,view_yview[0]+4000,false);
        draw_set_colour(c_white);
        draw_set_alpha(1);
    };
};;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draws the screenshot shown when fading to black
if(background_exists(back)){

    draw_enable_alphablend(0)
    draw_background(back,view_xview[0],view_yview[0])
    draw_enable_alphablend(1)
}

//Display messages
if(debug == true){

    draw_set_font(global.fontclassic)
    draw_text(view_xview[0],view_yview[0]+240-16,"instance:"+string(instance_count));
    draw_text(view_xview[0],view_yview[0]+240-25,"fps:"+string(fps));
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="112">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>debug =! debug;

if(debug == 0){

     audio_debug(0);
     show_debug_overlay(0);
};
else{

     audio_debug(true);
     show_debug_overlay(true);
};
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>8,8</point>
  </PhysicsShapePoints>
</object>
