<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_endmarker</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
//IP e Porta do servidor na qual nosso cliente irá conectar-se!
server_ip = get_string('Server IP: ', '127.0.0.1') 
server_port = 1234

//Cria um socket que fara a conexão e um "buffer" que irá 
//armazenar os dados que queremos enviar para o servidor.
client = network_create_socket(network_socket_tcp)
client_buffer = buffer_create(256, buffer_grow, 1)

//Usado para saber se o cliente está apto a enviar seus dados ao servidor
//é alterado para TRUE depois que manda o seu nickname/apelido.
client_ready = false 

//ID do Cliente no servidor, serve para descartar ações repetitivas que envolvem ele mesmo.
client_id = -1

//Diferença em milisegundos entre o envio de um pacote e o retorno dele pelo servidor.
client_ping = 0

//Assim como no servidor o cliente também tem listas que guardam informações de outros jogadores.
client_playerlist_id = ds_list_create()
client_playerlist_name = ds_list_create()
client_playerlist_x = ds_list_create()
client_playerlist_y = ds_list_create()

//Conecta ao servidor.
network_connect(client, server_ip, server_port)





</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if client_ready = true
{
    //Envia ao servidor o chamado "ping" contendo o momento (current_time) que o cliente enviou essa mensagem.
    buffer_seek(client_buffer, buffer_seek_start, 0)
    buffer_write(client_buffer, buffer_u8, 16)
    buffer_write(client_buffer, buffer_u32, current_time)
    network_send_packet(client, client_buffer, buffer_tell(client_buffer))
    
    
    //Envia ao servidor as coordenadas X e Y do jogador.
    buffer_seek(client_buffer, buffer_seek_start, 0)
    buffer_write(client_buffer, buffer_u8, 32)
    buffer_write(client_buffer, buffer_u16, obj_mario.x)
    buffer_write(client_buffer, buffer_u16, obj_mario.y)
    network_send_packet(client, client_buffer, buffer_tell(client_buffer))
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*if async_load[? 'type'] = network_type_data
{
    var buffer = async_load[? 'buffer']; //Pega o ID do buffer recebido que contem as informações.
    
    //Lê a primeira informação do buffer que deve ser o canal, esse irá indicar que tipo de ação
    //o cliente deve tomar com os dados seguintes.
    var channel = buffer_read(buffer, buffer_u8);
    
    switch (channel)
    {
        //Canal 16 indica que o servidor retornou o "ping" do cliente.
        case 16: 
        {
            //A diferença entre os milisegundos enviados pelo cliente amteriormente
            //e os milisegundos atuais é o ping do jogador.
            client_ping = current_time - buffer_read(buffer, buffer_u32) 
        }; break;

        //Depois de conectar-se com o servidor o mesmo irá pedir o nome do jogador
        //para isso ele faz esse pedido pelo canal 100.
        case 100: 
        {
            var myname = ''
            while (myname = '')
            {myname = get_string('O server pergunta: Qual seu nome?', '')}  
            
            //Junto com o pedido de nome o servidor fornece o ID do Cliente.
            client_id = buffer_read(buffer, buffer_u8)  
            
            //Envia o nickname/apelido de volta para o servidor pelo canal 101.
            buffer_seek(client_buffer, buffer_seek_start, 0)
            buffer_write(client_buffer, buffer_u8, 101)
            buffer_write(client_buffer, buffer_string, myname)
            network_send_packet(client, client_buffer, buffer_tell(client_buffer))
        
            client_ready = true
        }; break;
        
        //Pedido do servidor para remover um jogador 
        //pois ele não está mais conectado a ele 
        case 65: 
        {
           var s = buffer_read(buffer, buffer_u8) //ID do cliente que desconectou.
           var index = ds_list_find_index(client_playerlist_id, s) //Index dele nas liasta.
           
           //Se existir deleta todas as informações.
           if index &gt; -1
           {
                ds_list_delete(client_playerlist_id, index)
                ds_list_delete(client_playerlist_name, index)
                ds_list_delete(client_playerlist_x, index)
                ds_list_delete(client_playerlist_y, index)                   
           }
        }; break;
    
        //Atualização de todos os jogadores conectados ao servidor.
        case 64: 
        {
          //O servidor envia um JSON contendo todas as informações dos jogadores conectados a ele.
          //É necessario desmembrar esses dados e ler um por um atualizando os jogadores que o cliente
          //já tem e adicionando os que ainda não existem.  
          var map = json_decode(buffer_read(buffer, buffer_string));
          
          //F recebe o nome do primeiro cliente do Map.
          var f = ds_map_find_first(map)
          
          //Enquanto esse valor não for indefinido.
          while (!is_undefined(f))
          {
          
           //Caso o ID for do proprio cliente que está lendo os dados
           //ele passa para o proximo.         
           if real(f) = client_id
           {
                f = ds_map_find_next(map, f)  
                continue
           }
           
           //L armazena uma lista com todas as informações do cliente de ID "F".
           //var l = map[? f];
           
           //Tenta achar o ID nas listas para saber se ele já existe ou não.
           var index = ds_list_find_index(client_playerlist_id, real(f));
           if index &lt; 0
           {
            //Se não existir adiciona os dados na lista.
            ds_list_add(client_playerlist_id, real(f))
            ds_list_add(client_playerlist_name, l[| 0])
            ds_list_add(client_playerlist_x, l[| 1])
            ds_list_add(client_playerlist_y, l[| 2])
           }
           else
           {
            //Se sim apenas altera os dados na posição encontrada.
            ds_list_replace(client_playerlist_name, index, l[| 0])
            ds_list_replace(client_playerlist_x, index, l[| 1])
            ds_list_replace(client_playerlist_y, index, l[| 2])
           }
           
           //Acha o proximo cliente.
           f = ds_map_find_next(map, f)          
          }
        }; break;

    }
  
}*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
draw_set_font(global.wdigits)
draw_set_halign(1)
draw_set_valign(1)
draw_set_color(make_color_rgb(247, 208, 74))

//Puxa o numero de jogadores e desenha todos conforme os dados.
var player_count = ds_list_size(client_playerlist_name)
for (var i=0; i&lt;player_count; i+=1)
{   
    var xx, yy;
    xx = client_playerlist_x[| i]
    yy = client_playerlist_y[| i]
    draw_sprite(spr_mario_small_walk, 0, xx, yy)
    
    //Desenha o ID do cliente seguido de seu nome.
    draw_text(xx + 16, yy - 12, string(client_playerlist_id[| i]) + ' - ' + client_playerlist_name[| i])
};

//Desenha o PING.
draw_set_color(c_white)
draw_set_halign(0)
draw_set_valign(0)
draw_text(16, 16,'Ping: ' + string(client_ping))
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
